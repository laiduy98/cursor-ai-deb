name: ðŸ“… Schedule Workflow Dispatch
on:
  schedule:
    - cron: '0 0 * * *' # every day
  workflow_dispatch:
    inputs:
      date:
        description: 'Date to run the workflow'
        required: true
        type: string
        default: 'in 1 hour'
concurrency:
  group: schedule${{ github.event.inputs.date }}
  cancel-in-progress: true

jobs:
  schedule:
    name: ðŸ“… Schedule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new version
        id: check-version
        run: |
          # Get the latest version from version-history.json using the same query as build.sh
          LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/oslook/cursor-ai-downloads/refs/heads/main/version-history.json | jq -r '
            .versions
            | map(select(.platforms["linux-x64"] != null))
            | sort_by(.version | split(".") | map(tonumber))
            | last
            | .version
          ')
          echo "Latest version from API: $LATEST_VERSION"
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Get the current version from the repository
          if [ -f version.txt ]; then
            CURRENT_VERSION=$(cat version.txt)
          else
            CURRENT_VERSION="0.0.0"
            echo "version.txt not found, using default version: $CURRENT_VERSION"
          fi
          echo "Current version from repository: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "New version detected! Updating from $CURRENT_VERSION to $LATEST_VERSION"
            echo "new_version=true" >> $GITHUB_OUTPUT
            echo "$LATEST_VERSION" > version.txt
            git config --global user.name 'GitHub Action'
            git config --global user.email 'action@github.com'
            git add version.txt
            git commit -m "Update version to $LATEST_VERSION"
            git push
          else
            echo "No new version available. Current version: $CURRENT_VERSION"
            echo "new_version=false" >> $GITHUB_OUTPUT
          fi

      - uses: austenstone/schedule@v1.3
        if: steps.check-version.outputs.new_version == 'true'
        with:
          github-token: ${{ secrets.SCHEDULE_TOKEN }}
          date: ${{ github.event.inputs.date }}
          workflow: 'deb.yml'
          timezone: 'Europe/Paris' # US/Central, US/Pacific
          wait-ms: 45000